let
	/*
		`BST`:
			type de structure décrivant un nœud d'arbre binaire de recherche, et
			par extension un arbre binaire de recherche, de valeur `value`, de
			branche gauche `left` et de branche droite `right`
	*/
	type BST = {value : int, left : BST, right : BST}
	/*
		`addToBST`:
			fonction qui retourne l'arbre binaire de recherche `tree` mis à jour
			après ajout dans l'arbre d'un nœud de valeur `value` ou un nouvel
			arbre si celui-ci est vide
	*/
	function addToBST (tree : BST, value : int) : BST =
		let
			var leaf := BST {value = value, left = nil, right = nil}
		in
			if tree = nil then
				leaf
			else
				let
					var side := 0
					var current : BST := nil
					var next := tree
				in
					while next <> nil do (
						current := next;
						side := value < current.value;
						next := if side then
							current.left
						else
							current.right
					);
					if side then (
						current.left := leaf
					) else (
						current.right := leaf
					);
					tree
				end
		end
	/*
		`printBST`:
			procédure qui affiche une représentation d'un arbre binaire de
			recherche `tree`, les nœuds de l'arbre étant indentés selon la
			profondeur de leur position dans l'arbre
	*/
	function printBST (tree : BST) =
		let
			/*
				`printBST`:
					procédure qui affiche une représentation d'un nœud d'arbre
					binaire de recherche `tree` préfixé de `currentPadding`
			*/
			function printBST (tree : BST, currentPadding : string) =
				if tree <> nil then
					let
						var nextPadding := concat (currentPadding, "\t")
					in
						printBST (tree.left, nextPadding);
						print (currentPadding);
						print (itoa (tree.value));
						print ("\n");
						printBST (tree.right, nextPadding)
					end
		in
			printBST (tree, "")
		end
	/*
		`itoa`:
			fonction qui retourne la chaîne de caractères représentant l'entier
			`integer` en base décimale
	*/
	function itoa (integer : int) : string =
		if not (integer) then
			"0"
		else
			let
				var str := ""
				var neg := 0
			in
				if integer < 0 then (
					integer := -integer;
					neg := 1
				);
				while integer do
					let
						var quot := 0
						var rem := 0
					in
						quot := integer / 10;
						rem := integer - quot * 10;
						integer := quot;
						str := concat (chr (rem + 48), str)
					end;
				if neg then (
					str := concat ("-", str)
				);
				str
			end
	var tree : BST := nil
in
	tree := addToBST (tree, 16);
	tree := addToBST (tree, 1);
	tree := addToBST (tree, 5);
	tree := addToBST (tree, 21);
	tree := addToBST (tree, 4);
	tree := addToBST (tree, 10);
	tree := addToBST (tree, -49);
	tree := addToBST (tree, 32);
	tree := addToBST (tree, 65);
	printBST (tree)
end
