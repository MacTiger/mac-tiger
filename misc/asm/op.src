// Addition
// > int add(int x, int y) {
// >    return x + y;
// > }
_add       // À écrire...	

// Soustraction
// > int substract(int x, int y) {
// >    return x - y;
// > }
_substract // À écrire...	

// Division
// > int divide(int x, int y) {
// >    return x / y;
// > }
_divide    // À écrire...	

// Multiplication
// > int multiply(int x, int y) {
// >    return x * y;
// > }
_multiply  // À écrire...	

// Equal (string)
// > int equalstr(char* x, char* y) {
// >    int i = 0;    
// >    while (True) {
// >       if (x[i] == '\0' || y[i] == '\0') {
// >          if (x[i] == '\0' && y[i] == '\0') {
// >             return 1;
// >          } else {
// >             return 0;
// >          }
// >       } else {
// >          if (x[i] == y[i]) {
// >             i = i + 1;
// >          } else {
// >             return 0;
// >          }
// >       }
// >    }
// > }
_equalstr  // À écrire...

// Equal (int)
// > int equalint(int x, int y) {
// >    return (x == y);
// > }
_equalint  // À écrire...	

// Not
// Remarque : cette fonction n'est pas appelable directement depuis Tiger
// > int not(int x) {
// >    if (x == 0) {
// >       return 0;
// >    } else {
// >       return 1;
// >    }
// > }
_not       // À écrire...	

// Lower strict str
// > int lower_strict_str(char* str1, char* str2) {
// > 	int i = 0;	
// >	while (1) {
// >		if (str1[i] == '\0' && str2[i] == '\0') {
// >			return 0;
// >		} else if (str1[i] == '\0' && str2[i] != '\0') {
// >			return 1;
// >		} else if (str1[i] != '\0' && str2[i] == '\0') {
// >			return 0;
// >		} else if (str1[i] < str2[i]) {
// >			return 1;
// >		} else if (str1[i] > str2[i]) {
// >			return 0;
// >		} else {
// >			i = i + 1;
// >		}
// >	}
// >}
_lower_str // À écrire

// And
// > int and(int a, int b) {
// >    return (a && b);
// > }

// > int or(int a, int b) {
// >    return (a || b);
// > }
