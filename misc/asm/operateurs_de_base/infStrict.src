//	str1 < str2
//	oct2 : octet de poids fort
// R0 = 0 faux et R0=1 vrai

EXIT_EXC EQU 64
READ_EXC EQU 65
WRITE_EXC EQU 66
STACK_ADRS EQU 0X1000
LOAD_ADRS EQU 0xF000
NIL EQU 0

SP EQU R15
WR EQU R14
BP EQU R13

ORG LOAD_ADRS
START main_

LDW SP, #STACK_ADRS
//En tête fichier src

STRING1 string "" 
STRING2 string "aa"


	
main_
	LDW SP, #STACK_ADRS
	LDW R4, #0 //deplacement dans les deux strings


	//charge adresse 
	LDW R1,#STRING1 
	LDW R2,#STRING2
	
	//décale de deux octets s1 et s2
	ADD R1,R4,R1 
	ADD R2,R4,R2

	//Charge R1 et R2 avec les deux premiers octets de ce sur quoi ils pointent
	LDW R1,(R1)
	LDW R2,(R2)


	//Voir si oct2 nul chez str1
	LDW R3,#65280
	AND R1,R3,R0 //Retire 1er octet str1
	BNE 16 //Passe au SUB si ne vaut pas 0
	//vaut 0 ici
	AND R2,R3,R0
	BNE 6
	//oct2 nul chez str2
	LDW R0,#0 //faux : égalité
	BMP 4 	//FIN
	//oct2 non nul chez str2
	LDW R0,#1 //vrai : str1<str2
	BMP 36 //FIN
	

	//On sait ici que octet pds fort non nul chez str1
	SUB R1,R2,R0
	BGE 6 //Passe au test suivant si str1<str2
	LDW R0,#1
	BMP 18 //FIN
	BEQ 6 //On continue si str1 = str2
	LDW R0,#0
	BMP 18 //FIN

	
	//On sait ici que les deux octets sont égaux chez str1 et str2
	//voir si oct1 est nul chez str1
	LDW R3,#255
	AND R1,R3,R0 //Retire 2e octet str1
	BNE 6  //Si 2e octet str1 ne vaut pas nul on continue
	LDW R0,#0
	BMP 4 //FIN

	
	//on sait ici que octet pds faible non nul chez les deux strings
	ADQ 2,R4
	BMP -76
	
	//FIN
	TRP #EXIT_EXC

	
