// bonjour , 2 , 3 => njo

EXIT_EXC EQU 64
READ_EXC EQU 65
WRITE_EXC EQU 66
STACK_ADRS EQU 0X1000
LOAD_ADRS EQU 0xF000
NIL EQU 0

SP EQU R15
WR EQU R14
BP EQU R13
HP EQU R12

ORG LOAD_ADRS
START main_

 
LDW SP, #STACK_ADRS


STRING string "anticonstitutionnellement"
// R1 : adresse bien 
// R3 : lettre n°
// R4 : lg
// R0 : adresse début string

main_
	LDW R1,#STRING
	ADQ -2,R1
	LDW R2,(R1)
	ADQ 2,R1
	//Met la lg de la chaine dans R2

	LDW R3,#5
	//5 eme lettre : argument
	LDW R4,#3
	//Longueur 3=argument
	ADD R3,R4,R5
	//Il faut que R5<R2
	SUB R2,R5,R2
	BLW 70// R2-R5<=0 <=> R2<=R5  : stop

	
	//R5<R2 : ok
	LDW R2,#2 
	//Pour faire le modulo 2
	//Quotient dans R2 et reste dans R3 modifé
	DIV R3,R2,R2

	LDW R5,#2
	MUL R2,R5,R2
	ADD R2,R1,R1 
	//Se déplace là où il faut dans le tas : + 2*quotient
	
	//Met lg en hp, puis incrémente hp
	STW R4,(HP)
	ADQ 2,HP
	LDW R0,HP
	//Met le premier carac à hp et hp dans R0
	
	TST R3 //Avoir le flag de R3
	BEQ
	//==1
	//Si R3 = 1, décale 1 octet
	ADQ 1,R1
	LDB R5,(R1)
	STB R5, (HP)
	ADQ 1,HP
	ADQ -1,R4 //-1 caractere à recopier
	ADQ 1,R1
	//==0
	
	LDW R2,#2
	DIV R4,R2,R2
	//Quotient dans R2 et reste dans R4 modifié

	TST R2
	//R2 = nb de mots à recopier
	BEQ 14//Pas de mot complet à recopier => OR R4
	// >= 1 mot à recopier
	LDW R5,(R1)
	STW R5,(HP)
	ADQ 2,HP
	ADQ 2,R1
	ADQ -1,R2//-1 MOT À RECOPIER
	BNE -10 //Si reste des mots -> LDW 

	//After BEQ
	TST R4 // 1 ou 0
	BEQ 8
	// il faut écrire un octet
	LDB R5,(R1)
	STB R5,(HP) //écrit 1 octet
	ADQ 1,HP

	//Test HP
	LDW R2,#2
	LDW R3,HP
	DIV HP,R2,R2
	TEST HP
	BEQ 6
	//HP était impair
	LDW HP,R3
	ADQ 1,HP

	LDW HP,R3	

	//After BEQ : fin
	






