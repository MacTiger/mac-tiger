EXIT_EXC EQU 64
READ_EXC EQU 65
WRITE_EXC EQU 66
STACK_ADRS EQU 0X1000
LOAD_ADRS EQU 0xF000
NIL EQU 0

SP EQU R15
WR EQU R14
BP EQU R13

ORG LOAD_ADRS
START main_

LDW SP, #STACK_ADRS

//add_ prend deux elts en param, les additionne et met le res dans R0.//
add_
	ADQ -2,SP //SP sur chaînage BP nouvel environnement
	STW BP, (SP) //contenu du registre BP sur chaînage BP nouvel environnement
	LDW BP, SP //BP pointe sur le Base Pointer de la fct appelante
	LDW R1, (BP)4 //paramètre 2 dans registre 1
	LDW R2, (BP)6 //paramètre 1 dans registre 2
	ADD R1,R2,R0 //Résultat p1+p2 dans R0
	LDW BP, (SP) //BP vaut le Base Pointer de la fct° appelante
	ADQ 2,SP //SP est sur @ de retour de la fonction appelée

multiply_
	LDW R1, (SP)2
	LDW R2, (SP)4
	MUL R1, R2, R0
	RTS

divide_
	LDW R1, (SP)2
	LDW R2, (SP)4
	DIV R1, R2, R0
	RTS

substract_
	LDW R1, (SP)2
	LDW R2, (SP)4
	SUB R1, R2, R0
	RTS

equal_int_
	LDW R1, (SP)2
	LDW R2, (SP)4
	SUB R1, R2, R0
	BEQ
	LDW R0, #1 
	RTS
	LDW R1, #0
	RTS
main_
	LDW R1,#10
	LDW R2,#20

	STW R1,-(SP)
	STW R2,-(SP) //dans fction appelante : SP sur dernier arg à passer 
	JSR @add_
	ADQ 2*2,SP //nettoyage de la pile : hôte params

	TRP #EXIT_EXC
